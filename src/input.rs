extern crate piston_window;

use piston_window::Button::Keyboard;
use piston_window::Key;	
use piston_window::*;

pub fn key_press(args: &Button) -> String {
  //println!("{:?}", *args);
  match *args {
    //Keyboard(Key::A, Key::LShift) => return String::from("A"),
    Keyboard(Key::A) => return String::from("a"),
    Keyboard(Key::B) => return String::from("b"),
    Keyboard(Key::C) => return String::from("c"),
    Keyboard(Key::D) => return String::from("d"),
    Keyboard(Key::E) => return String::from("e"),
    Keyboard(Key::F) => return String::from("f"),
    Keyboard(Key::G) => return String::from("g"),
    Keyboard(Key::H) => return String::from("h"),
    Keyboard(Key::I) => return String::from("i"),
    Keyboard(Key::J) => return String::from("j"),
    Keyboard(Key::K) => return String::from("k"),
    Keyboard(Key::L) => return String::from("l"),
    Keyboard(Key::M) => return String::from("m"),
    Keyboard(Key::N) => return String::from("n"),
    Keyboard(Key::O) => return String::from("o"),
    Keyboard(Key::P) => return String::from("p"),
    Keyboard(Key::Q) => return String::from("q"),
    Keyboard(Key::R) => return String::from("r"),
    Keyboard(Key::S) => return String::from("s"),
    Keyboard(Key::T) => return String::from("t"),
    Keyboard(Key::U) => return String::from("u"),
    Keyboard(Key::V) => return String::from("v"),
    Keyboard(Key::W) => return String::from("w"),
    Keyboard(Key::X) => return String::from("x"),
    Keyboard(Key::Y) => return String::from("y"),
    Keyboard(Key::Z) => return String::from("z"),
    Keyboard(Key::D0) => return String::from("0"),
    Keyboard(Key::D1) => return String::from("1"),
    Keyboard(Key::D2) => return String::from("2"),
    Keyboard(Key::D3) => return String::from("3"),
    Keyboard(Key::D4) => return String::from("4"),
    Keyboard(Key::D5) => return String::from("5"),
    Keyboard(Key::D6) => return String::from("6"),
    Keyboard(Key::D7) => return String::from("7"),
    Keyboard(Key::D8) => return String::from("8"),
    Keyboard(Key::D9) => return String::from("9"),
    Keyboard(Key::Backspace) => return String::from("Backspace"), // call a function instead, what if I type Backspace...
    Keyboard(Key::Space) => return String::from(" "),
    Keyboard(Key::Return) => return String::from("Return"),
    Keyboard(Key::Tab) => return String::from("    "),
    Keyboard(Key::Up) => return String::from("Up"),
    Keyboard(Key::Down) => return String::from("Down"),
    Keyboard(Key::Left) => return String::from("Left"),
    Keyboard(Key::Right) => return String::from("Right"),
    //Keyboard(Key::Exclaim) => return String::from("!"),
    //Keyboard(Key::Quotedbl) => return String::from("\""),
    //Keyboard(Key::Hash) => return String::from("#"),
    //Keyboard(Key::Dollar) => return String::from("$"),
    //Keyboard(Key::Percent) => return String::from("%"),
    //Keyboard(Key::Ampersand) => return String::from("&"),
    //Keyboard(Key::Quote) => return String::from("\'"),
    //Keyboard(Key::LeftParen) => return String::from("("),
    //Keyboard(Key::RightParen) => return String::from(")"),
    //Keyboard(Key::Asterisk) => return String::from("*"),
    //Keyboard(Key::Plus) => return String::from("+"),
    //Keyboard(Key::Comma) => return String::from(","),
    //Keyboard(Key::Minus) => return String::from("-"),
    //Keyboard(Key::Period) => return String::from("."),
    //Keyboard(Key::Slash) => return String::from("/"),
    //Keyboard(Key::Colon) => return String::from(":"),
    //Keyboard(Key::Semicolon) => return String::from(";"),
    //Keyboard(Key::Less) => return String::from("<"),
    //Keyboard(Key::Equals) => return String::from("="),
    //Keyboard(Key::Greater) => return String::from(">"),
    //Keyboard(Key::Question) => return String::from("?"),
    //Keyboard(Key::At) => return String::from("@"),
    //Keyboard(Key::LeftBracket) => return String::from("["),
    //Keyboard(Key::Backslash) => return String::from("\\"),
    //Keyboard(Key::RightBracket) => return String::from("]"),
    //Keyboard(Key::Underscore) => return String::from("_"),
    //Keyboard(Key::Backquote) => return String::from("`"),
    _ => String::from("")
  }
}